/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ManageRouteImport } from './routes/_manage'
import { Route as ManageIndexRouteImport } from './routes/_manage/index'
import { Route as SentenceCopyIdRouteImport } from './routes/sentence-copy/$id'
import { Route as PrintIdRouteImport } from './routes/print/$id'
import { Route as PreclassGuideIdRouteImport } from './routes/preclass-guide/$id'
import { Route as PaperIdRouteImport } from './routes/paper/$id'
import { Route as ListeningIdRouteImport } from './routes/listening/$id'
import { Route as AnswerIdRouteImport } from './routes/answer/$id'
import { Route as ManageVocabularyIndexRouteImport } from './routes/_manage/vocabulary/index'
import { Route as ManageTasksIndexRouteImport } from './routes/_manage/tasks/index'
import { Route as ManageSettingsIndexRouteImport } from './routes/_manage/settings/index'
import { Route as ManagePapersIndexRouteImport } from './routes/_manage/papers/index'
import { Route as ManageDataIndexRouteImport } from './routes/_manage/data/index'
import { Route as ManageCoursesIndexRouteImport } from './routes/_manage/courses/index'
import { Route as ManagePaperDetailIdRouteImport } from './routes/_manage/paper-detail/$id'

const ManageRoute = ManageRouteImport.update({
  id: '/_manage',
  getParentRoute: () => rootRouteImport,
} as any)
const ManageIndexRoute = ManageIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManageRoute,
} as any)
const SentenceCopyIdRoute = SentenceCopyIdRouteImport.update({
  id: '/sentence-copy/$id',
  path: '/sentence-copy/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PrintIdRoute = PrintIdRouteImport.update({
  id: '/print/$id',
  path: '/print/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PreclassGuideIdRoute = PreclassGuideIdRouteImport.update({
  id: '/preclass-guide/$id',
  path: '/preclass-guide/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PaperIdRoute = PaperIdRouteImport.update({
  id: '/paper/$id',
  path: '/paper/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ListeningIdRoute = ListeningIdRouteImport.update({
  id: '/listening/$id',
  path: '/listening/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AnswerIdRoute = AnswerIdRouteImport.update({
  id: '/answer/$id',
  path: '/answer/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ManageVocabularyIndexRoute = ManageVocabularyIndexRouteImport.update({
  id: '/vocabulary/',
  path: '/vocabulary/',
  getParentRoute: () => ManageRoute,
} as any)
const ManageTasksIndexRoute = ManageTasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => ManageRoute,
} as any)
const ManageSettingsIndexRoute = ManageSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => ManageRoute,
} as any)
const ManagePapersIndexRoute = ManagePapersIndexRouteImport.update({
  id: '/papers/',
  path: '/papers/',
  getParentRoute: () => ManageRoute,
} as any)
const ManageDataIndexRoute = ManageDataIndexRouteImport.update({
  id: '/data/',
  path: '/data/',
  getParentRoute: () => ManageRoute,
} as any)
const ManageCoursesIndexRoute = ManageCoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => ManageRoute,
} as any)
const ManagePaperDetailIdRoute = ManagePaperDetailIdRouteImport.update({
  id: '/paper-detail/$id',
  path: '/paper-detail/$id',
  getParentRoute: () => ManageRoute,
} as any)

export interface FileRoutesByFullPath {
  '/answer/$id': typeof AnswerIdRoute
  '/listening/$id': typeof ListeningIdRoute
  '/paper/$id': typeof PaperIdRoute
  '/preclass-guide/$id': typeof PreclassGuideIdRoute
  '/print/$id': typeof PrintIdRoute
  '/sentence-copy/$id': typeof SentenceCopyIdRoute
  '/': typeof ManageIndexRoute
  '/paper-detail/$id': typeof ManagePaperDetailIdRoute
  '/courses': typeof ManageCoursesIndexRoute
  '/data': typeof ManageDataIndexRoute
  '/papers': typeof ManagePapersIndexRoute
  '/settings': typeof ManageSettingsIndexRoute
  '/tasks': typeof ManageTasksIndexRoute
  '/vocabulary': typeof ManageVocabularyIndexRoute
}
export interface FileRoutesByTo {
  '/answer/$id': typeof AnswerIdRoute
  '/listening/$id': typeof ListeningIdRoute
  '/paper/$id': typeof PaperIdRoute
  '/preclass-guide/$id': typeof PreclassGuideIdRoute
  '/print/$id': typeof PrintIdRoute
  '/sentence-copy/$id': typeof SentenceCopyIdRoute
  '/': typeof ManageIndexRoute
  '/paper-detail/$id': typeof ManagePaperDetailIdRoute
  '/courses': typeof ManageCoursesIndexRoute
  '/data': typeof ManageDataIndexRoute
  '/papers': typeof ManagePapersIndexRoute
  '/settings': typeof ManageSettingsIndexRoute
  '/tasks': typeof ManageTasksIndexRoute
  '/vocabulary': typeof ManageVocabularyIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_manage': typeof ManageRouteWithChildren
  '/answer/$id': typeof AnswerIdRoute
  '/listening/$id': typeof ListeningIdRoute
  '/paper/$id': typeof PaperIdRoute
  '/preclass-guide/$id': typeof PreclassGuideIdRoute
  '/print/$id': typeof PrintIdRoute
  '/sentence-copy/$id': typeof SentenceCopyIdRoute
  '/_manage/': typeof ManageIndexRoute
  '/_manage/paper-detail/$id': typeof ManagePaperDetailIdRoute
  '/_manage/courses/': typeof ManageCoursesIndexRoute
  '/_manage/data/': typeof ManageDataIndexRoute
  '/_manage/papers/': typeof ManagePapersIndexRoute
  '/_manage/settings/': typeof ManageSettingsIndexRoute
  '/_manage/tasks/': typeof ManageTasksIndexRoute
  '/_manage/vocabulary/': typeof ManageVocabularyIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/answer/$id'
    | '/listening/$id'
    | '/paper/$id'
    | '/preclass-guide/$id'
    | '/print/$id'
    | '/sentence-copy/$id'
    | '/'
    | '/paper-detail/$id'
    | '/courses'
    | '/data'
    | '/papers'
    | '/settings'
    | '/tasks'
    | '/vocabulary'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/answer/$id'
    | '/listening/$id'
    | '/paper/$id'
    | '/preclass-guide/$id'
    | '/print/$id'
    | '/sentence-copy/$id'
    | '/'
    | '/paper-detail/$id'
    | '/courses'
    | '/data'
    | '/papers'
    | '/settings'
    | '/tasks'
    | '/vocabulary'
  id:
    | '__root__'
    | '/_manage'
    | '/answer/$id'
    | '/listening/$id'
    | '/paper/$id'
    | '/preclass-guide/$id'
    | '/print/$id'
    | '/sentence-copy/$id'
    | '/_manage/'
    | '/_manage/paper-detail/$id'
    | '/_manage/courses/'
    | '/_manage/data/'
    | '/_manage/papers/'
    | '/_manage/settings/'
    | '/_manage/tasks/'
    | '/_manage/vocabulary/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ManageRoute: typeof ManageRouteWithChildren
  AnswerIdRoute: typeof AnswerIdRoute
  ListeningIdRoute: typeof ListeningIdRoute
  PaperIdRoute: typeof PaperIdRoute
  PreclassGuideIdRoute: typeof PreclassGuideIdRoute
  PrintIdRoute: typeof PrintIdRoute
  SentenceCopyIdRoute: typeof SentenceCopyIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_manage': {
      id: '/_manage'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ManageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_manage/': {
      id: '/_manage/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ManageIndexRouteImport
      parentRoute: typeof ManageRoute
    }
    '/sentence-copy/$id': {
      id: '/sentence-copy/$id'
      path: '/sentence-copy/$id'
      fullPath: '/sentence-copy/$id'
      preLoaderRoute: typeof SentenceCopyIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/print/$id': {
      id: '/print/$id'
      path: '/print/$id'
      fullPath: '/print/$id'
      preLoaderRoute: typeof PrintIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/preclass-guide/$id': {
      id: '/preclass-guide/$id'
      path: '/preclass-guide/$id'
      fullPath: '/preclass-guide/$id'
      preLoaderRoute: typeof PreclassGuideIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/paper/$id': {
      id: '/paper/$id'
      path: '/paper/$id'
      fullPath: '/paper/$id'
      preLoaderRoute: typeof PaperIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/listening/$id': {
      id: '/listening/$id'
      path: '/listening/$id'
      fullPath: '/listening/$id'
      preLoaderRoute: typeof ListeningIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/answer/$id': {
      id: '/answer/$id'
      path: '/answer/$id'
      fullPath: '/answer/$id'
      preLoaderRoute: typeof AnswerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_manage/vocabulary/': {
      id: '/_manage/vocabulary/'
      path: '/vocabulary'
      fullPath: '/vocabulary'
      preLoaderRoute: typeof ManageVocabularyIndexRouteImport
      parentRoute: typeof ManageRoute
    }
    '/_manage/tasks/': {
      id: '/_manage/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof ManageTasksIndexRouteImport
      parentRoute: typeof ManageRoute
    }
    '/_manage/settings/': {
      id: '/_manage/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ManageSettingsIndexRouteImport
      parentRoute: typeof ManageRoute
    }
    '/_manage/papers/': {
      id: '/_manage/papers/'
      path: '/papers'
      fullPath: '/papers'
      preLoaderRoute: typeof ManagePapersIndexRouteImport
      parentRoute: typeof ManageRoute
    }
    '/_manage/data/': {
      id: '/_manage/data/'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof ManageDataIndexRouteImport
      parentRoute: typeof ManageRoute
    }
    '/_manage/courses/': {
      id: '/_manage/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof ManageCoursesIndexRouteImport
      parentRoute: typeof ManageRoute
    }
    '/_manage/paper-detail/$id': {
      id: '/_manage/paper-detail/$id'
      path: '/paper-detail/$id'
      fullPath: '/paper-detail/$id'
      preLoaderRoute: typeof ManagePaperDetailIdRouteImport
      parentRoute: typeof ManageRoute
    }
  }
}

interface ManageRouteChildren {
  ManageIndexRoute: typeof ManageIndexRoute
  ManagePaperDetailIdRoute: typeof ManagePaperDetailIdRoute
  ManageCoursesIndexRoute: typeof ManageCoursesIndexRoute
  ManageDataIndexRoute: typeof ManageDataIndexRoute
  ManagePapersIndexRoute: typeof ManagePapersIndexRoute
  ManageSettingsIndexRoute: typeof ManageSettingsIndexRoute
  ManageTasksIndexRoute: typeof ManageTasksIndexRoute
  ManageVocabularyIndexRoute: typeof ManageVocabularyIndexRoute
}

const ManageRouteChildren: ManageRouteChildren = {
  ManageIndexRoute: ManageIndexRoute,
  ManagePaperDetailIdRoute: ManagePaperDetailIdRoute,
  ManageCoursesIndexRoute: ManageCoursesIndexRoute,
  ManageDataIndexRoute: ManageDataIndexRoute,
  ManagePapersIndexRoute: ManagePapersIndexRoute,
  ManageSettingsIndexRoute: ManageSettingsIndexRoute,
  ManageTasksIndexRoute: ManageTasksIndexRoute,
  ManageVocabularyIndexRoute: ManageVocabularyIndexRoute,
}

const ManageRouteWithChildren =
  ManageRoute._addFileChildren(ManageRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  ManageRoute: ManageRouteWithChildren,
  AnswerIdRoute: AnswerIdRoute,
  ListeningIdRoute: ListeningIdRoute,
  PaperIdRoute: PaperIdRoute,
  PreclassGuideIdRoute: PreclassGuideIdRoute,
  PrintIdRoute: PrintIdRoute,
  SentenceCopyIdRoute: SentenceCopyIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
