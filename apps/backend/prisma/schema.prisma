// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  password       String
  difyApiUrl     String?
  difyApiToken   String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courses        Course[]
  papers         Paper[]
  vocabularies   Vocabulary[]
  GenerationTask GenerationTask[]
}

model Course {
  id        Int      @id @default(autoincrement())
  name      String
  cover     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  papers Paper[]
}

model Paper {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Json     @default("{}")

  user   User @relation(fields: [userId], references: [id])
  userId Int

  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?

  coreWords    String? @db.Text
  keySentences String? @db.Text
  remark       String? @db.Text

  generationTask GenerationTask?
}

model Vocabulary {
  id          Int     @id @default(autoincrement())
  word        String
  translation String
  phonetic    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, word])
}

enum TaskStatus {
  PENDING
  PROCESSING
  SUCCESS
  ERROR
  CANCELLED
}

model GenerationTask {
  id        Int        @id @default(autoincrement())
  status    TaskStatus @default(PENDING)
  progress  Int        @default(0)
  error     String?
  result    Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  paperId Int   @unique
  paper   Paper @relation(fields: [paperId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([paperId])
}
